from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

def calculate_payment_plan(course_end_date_str, total_cost):
    today = datetime.today()
    course_end_date = datetime.strptime(course_end_date_str, "%Y-%m-%d")
    
    # Finance fee
    finance_fee = 149
    
    # Determine the number of months available for payment (excluding current month if past the 1st)
    first_payment_date = datetime(today.year, today.month, 1)
    if today.day > 1:
        first_payment_date += relativedelta(months=1)
    
    months_available = (course_end_date.year - first_payment_date.year) * 12 + (course_end_date.month - first_payment_date.month) + 1
    
    # Max payments is 12, but can't exceed available months
    num_payments = min(12, months_available)
    
    # Immediate downpayment
    downpayment = 199
    remaining_balance = total_cost - downpayment + finance_fee
    
    # If payments extend past course start date, downpayment increases to 499
    if num_payments > 1:
        downpayment = 499
        remaining_balance = total_cost - downpayment + finance_fee
    
    # Calculate equal monthly payments
    if num_payments > 1:
        monthly_payment = round(remaining_balance / num_payments, 2)
    else:
        monthly_payment = remaining_balance
    
    # Generate payment schedule
    payment_schedule = [("Immediate Downpayment", f"£{downpayment:.2f}")]
    for i in range(num_payments):
        payment_date = first_payment_date + relativedelta(months=i)
        payment_schedule.append((payment_date.strftime("%Y-%m-%d"), f"£{monthly_payment:.2f}"))
    
    return payment_schedule

# Example usage
course_end_date = "2025-06-30"
total_cost = 3000
payment_plan = calculate_payment_plan(course_end_date, total_cost)
for payment in payment_plan:
    print(payment)
